
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ACER
 */
public class borrowBook extends javax.swing.JFrame {
    public Connection cn;
    public Statement st;
    /**
     * Creates new form borrowBook
     */
    public borrowBook() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        try{
            Class.forName("com.mysql.jdbc.Driver");
            cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/librarymanagement?zeroDateTimeBehavior=convertToNull","root","");
            st = cn.createStatement();
           
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        txtBookID = new javax.swing.JTextField();
        btnBorrow = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1500, 850));
        getContentPane().setLayout(null);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack);
        btnBack.setBounds(1020, 670, 130, 50);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 3, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Borrow Book");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(580, 90, 340, 90);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Student ID");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(420, 300, 160, 29);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Book ID");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(420, 400, 160, 29);

        txtStudentID.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStudentIDKeyTyped(evt);
            }
        });
        getContentPane().add(txtStudentID);
        txtStudentID.setBounds(670, 300, 430, 35);

        txtBookID.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        txtBookID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBookIDKeyTyped(evt);
            }
        });
        getContentPane().add(txtBookID);
        txtBookID.setBounds(670, 390, 430, 35);

        btnBorrow.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBorrow.setText("Borrow");
        btnBorrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrowActionPerformed(evt);
            }
        });
        getContentPane().add(btnBorrow);
        btnBorrow.setBounds(640, 500, 160, 60);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/istockphoto-1132077472-612x612 (2).jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1500, 850);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        setVisible(false);
        new home().setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtStudentIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentIDKeyTyped
        char c = evt.getKeyChar();
        
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_txtStudentIDKeyTyped

    private void txtBookIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyTyped
        char c = evt.getKeyChar();
        
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_txtBookIDKeyTyped

    private void btnBorrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrowActionPerformed
        String studID = txtStudentID.getText();
        String bookID = txtBookID.getText();
        Date date = new Date(); 
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd");
        String search;
        ResultSet rs;
        int copy, newcopy;
        
        if (studID.equals("") || bookID.equals("")){
            JOptionPane.showMessageDialog(null, "Please fill the necessary details");
        }
        else if (studID.length()!=5 || bookID.length()!=5){
            JOptionPane.showMessageDialog(null, "Invalid ID Input");
        }
        else{
            try{
                search = "SELECT `STUDENT ID` FROM `student` WHERE `STUDENT ID` = "+studID+";";
                rs = st.executeQuery(search);
                if(rs.next()==false){
                    JOptionPane.showMessageDialog(null, "This student is not registered.");
                    txtStudentID.setText("");
                    txtBookID.setText("");
                }
                else{
                    search = "SELECT `BOOK ID`,`COPIES` FROM `book` WHERE `BOOK ID` = "+bookID+";";
                    rs = st.executeQuery(search);
                    if(rs.next()==false){
                        JOptionPane.showMessageDialog(null, "Book Not Found");
                        txtStudentID.setText("");
                        txtBookID.setText("");
                    }
                    //if borrowed
                    else{
                        search = "SELECT `STUDENT ID`,`BOOK ID`,`RETURN DATE` FROM `transaction` WHERE `STUDENT ID` = "+studID+" AND `BOOK ID`= "+bookID+";";
                        rs = st.executeQuery(search);
                        if(rs.next()==false){
                            
                            
                                search = "SELECT `COPIES` FROM `book` WHERE `BOOK ID` = "+bookID+";";
                                rs = st.executeQuery(search);
                                if(rs.next()==false){
                                    JOptionPane.showMessageDialog(null, "No copy");
                                }
                                else{
                                    copy = rs.getInt("COPIES");

                                    if (copy<=0){
                                        JOptionPane.showMessageDialog(null, "The book is not available as of the moment");
                                    }
                                    else{
                                        String fdate = sdf.format(date);

                                        String sql1 = "INSERT INTO `transaction`(`STUDENT ID`, `BOOK ID`, `BORROW DATE`)" +" VALUES ('"+ studID +"', '"+ bookID +"', '"+ fdate +"');";
                                        st.executeUpdate(sql1);
                                        newcopy = copy-1;

                                        String update = "UPDATE `book` SET `COPIES`='"+newcopy+"' WHERE `BOOK ID`="+bookID+";";
                                        st.executeUpdate(update);
                                        JOptionPane.showMessageDialog(null, "Successully borrowed");
                                    }
                                }
                            
                            
                        }
                        else{
                            String bStatus = rs.getString("RETURN DATE");
                            if(bStatus == null){
                                JOptionPane.showMessageDialog(null, "The student haven't returned this yet");
                            }
                            else{
                                search = "SELECT `COPIES` FROM `book` WHERE `BOOK ID` = "+bookID+";";
                                rs = st.executeQuery(search);
                                if(rs.next()==false){
                                    JOptionPane.showMessageDialog(null, "No copy");
                                }
                                else{
                                    copy = rs.getInt("COPIES");

                                    if (copy<=0){
                                        JOptionPane.showMessageDialog(null, "The book is not available");
                                    }
                                    else{
                                        String fdate = sdf.format(date);

                                        String sql1 = "INSERT INTO `transaction`(`STUDENT ID`, `BOOK ID`, `BORROW DATE`)" +" VALUES ('"+ studID +"', '"+ bookID +"', '"+ fdate +"');";
                                        st.executeUpdate(sql1);

                                        newcopy = copy-1;

                                        String update = "UPDATE `book` SET `COPIES`='"+newcopy+"' WHERE `BOOK ID`="+bookID+";";
                                        st.executeUpdate(update);
                                        JOptionPane.showMessageDialog(null, "Successully borrowed");
                                    }
                                }
                            }
                        }
                        
                    }
                }
            }
            catch (SQLException ex){
                Logger.getLogger(searchStudent.class.getName()).log(Level.SEVERE,null,ex);
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_btnBorrowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(borrowBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(borrowBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(borrowBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(borrowBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new borrowBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBorrow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtStudentID;
    // End of variables declaration//GEN-END:variables
}
